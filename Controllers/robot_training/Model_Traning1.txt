import numpy as np
from tensorflow.keras.models import Sequential
from tensorflow.keras.layers import Conv2D, MaxPooling2D, Flatten, Dense
from tensorflow.keras.optimizers import Adam
from sklearn.model_selection import train_test_split
from tensorflow.keras.callbacks import ModelCheckpoint, EarlyStopping

# Load data
data = np.load('/content/gdrive/MyDrive/Colab Notebooks/captured_Training_data.npz')
X_train, y_train = data['X'], data['y']

# Normalize input images
X_train = X_train / 255.0

# Split data into training and validation sets
X_train, X_val, y_train, y_val = train_test_split(X_train, y_train, test_size=0.2, random_state=42)

# Define the model
model = Sequential()
model.add(Conv2D(24, (5, 5), strides=(2, 2), activation='relu', input_shape=(240, 360, 3)))
model.add(MaxPooling2D((2, 2)))
model.add(Conv2D(36, (5, 5), strides=(2, 2), activation='relu'))
model.add(MaxPooling2D((2, 2)))
model.add(Conv2D(48, (5, 5), strides=(2, 2), activation='relu'))
model.add(MaxPooling2D((2, 2)))
model.add(Flatten())
model.add(Dense(100, activation='relu'))
model.add(Dense(50, activation='relu'))
model.add(Dense(10, activation='relu'))
model.add(Dense(1))

# Compile the model
model.compile(optimizer=Adam(learning_rate=0.0001), loss='mse')

# Define callbacks (early stopping and model checkpoint)
early_stopping = EarlyStopping(monitor='val_loss', patience=3, restore_best_weights=True)
model_checkpoint = ModelCheckpoint('/content/gdrive/MyDrive/Colab Notebooks/best_lane_following_model.h5', 
                                   save_best_only=True, 
                                   save_weights_only=False, 
                                   monitor='val_loss', 
                                   mode='min', 
                                   verbose=1)

# Train the model with callbacks
history = model.fit(X_train, y_train, 
                    validation_data=(X_val, y_val), 
                    epochs=20, 
                    batch_size=32, 
                    callbacks=[early_stopping, model_checkpoint])

# Evaluate the model on the validation set
val_loss = model.evaluate(X_val, y_val)
print(f'Validation Loss: {val_loss}')

# Save the model
model.save('/content/gdrive/MyDrive/Colab Notebooks/final_lane_following_model', save_format='tf')
